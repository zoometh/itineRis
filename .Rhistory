mode = 'markers',
a = ~isotop.val1.perc,
b = ~isotop.val2.perc,
c = ~isotop.val3.perc,
# text = ~lbl,
# hoverinfo = 'text',
#opacity = .3,
marker = list(
# symbol = ~symbol,
#symbols = 'square', # unique(df.isotop$symbol),
color = ~cluster.color,
size = 12,
opacity = .6,
line = list('width' = 1,
color = '#00000070')
)) %>%
add_trace(
type = 'scatterternary',
mode = 'text',
a = ~isotop.val1.perc,
b = ~isotop.val2.perc,
c = ~isotop.val3.perc,
text = ~cluster,
hovertext = ~lbl,
# text = ~cluster,
hoverinfo = 'text',
#opacity = .3,
marker = list(
# symbol = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
#color = ~color.object,
size = 10,
opacity = 0,
line = list('width' = 1,
color = '#00000070')),
showlegend = F,
inherit = F
) %>%
layout(
# title = "Relative percentages of lead isotops",
title = list(text = "Relative % of isotopes", x = 1),
margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min1, title = isotop1),
baxis = list(min = min2, title = isotop2),
caxis = list(min = min3, title = isotop3)
),
legend = list(x = 0.1, y = 0.9)
)
# fig
fig$config <- list(doubleClick = "resize")
fig
})
})
}
)
}
isotop_ternaryplot_shiny()
#' Create an interactive ternary plot from a dataset
#'
#' @name isotop_ternaryplot
#'
#' @description Create an interactive ternary plot from a dataset, whether fully interactive (R Shiny + Plotly) or partly interactive (Plotly)
#'
#' @param df a dataframe with isotop values.
#' @param shiny if TRUE (Default), interactive (Shiny)
#' @param export.plot if TRUE will export.
#' @param verbose if TRUE, print messages.
#'
#' @return a Plotly interactive ternary plot
#'
#' @examples
#'
#' # Not interactive, with LIA isotops
#' d <- hash::hash()
#'
#' d <- read_lia(d = d,
#'               d.tag = "lia.objects",
#'               df.path = "C:/Rprojects/itineRis/results/LIA data objects.xlsx",
#'               header.line = 2)
#' d <- read_lia(d = d,
#'               d.tag = "lia.mines",
#'               pattern.objects.num = "Locality/.Mine",
#'               pattern.objects.Pb206_Pb204 = "206Pb/204Pb",
#'               pattern.objects.Pb207_Pb204 = "207Pb/204Pb",
#'               pattern.objects.Pb208_Pb204 = "208Pb/204Pb",
#'               df.path = "C:/Rprojects/itineRis/results/Coordinates-mines_Thomas Huet.xlsx",
#'               header.line = 1)
#'
#' library(dplyr)
#'
#' mydf <- rbind(d$lia.mines, d$lia.objects)
#' df.isotop <- isotop_dataframe(df = mydf, df.path = NA)
#' df.isotop[df.isotop$object == "golasecca", "color.object"] <- "#0000FF"
#' df.isotop[df.isotop$object == "hochdorf", "color.object"] <- "#00FFFF"
#' df.isotop[df.isotop$object == "France", "color.object"] <- "#FF0000"
#' df.isotop[df.isotop$object == "France", "symbol"] <- "triangle"
#' df.isotop[df.isotop$object == "Iberian Peninsula", "color.object"] <- "#FFA500"
#' df.isotop[df.isotop$object == "Iberian Peninsula", "symbol"] <- "triangle"
#' df.isotop[df.isotop$object == "Switzerland", "color.object"] <- "#964B00"
#' df.isotop[df.isotop$object == "Switzerland", "symbol"] <- "triangle"
#'
#' ## Plot
#' isotop_ternaryplot(df.isotop)
#'
#' ## Export
#' isotop_ternaryplot(df.isotop, export.plot = T,
#'                    outDir = "C:/Rprojects/itineRis/results/", outFile = "lia_tern_2")
#'
#' ## Interactive
#' isotop_ternaryplot(shiny = T)
#'
#' @export
#'
isotop_ternaryplot <- function(df = NA,
run.shiny = TRUE,
export.plot = FALSE,
outDir = paste0(system.file(package = 'itineRis'), "/results"),
outFile = "tern_lia",
verbose = TRUE){
if(run.shiny){
# Don't work
# TODO: fix or suppress this shiny snippet
if(verbose){print("Run the R Shiny app")}
Sys.setlocale("LC_ALL", "C")
library(shiny)
library(plotly)
library(dplyr)
df.iso <- "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv"
dfisotops <- read.csv2(df.iso, sep = ";", row.names = 1)
# clean dataset
dfisotops <- dfisotops %>%
select_if(~ !any(is.na(.)))
# intersect the colnames from the df and the thesaurus to find the correct columns if df
thes <- isotop_thesaurus(as.list = T)
studied.isotops <- intersect(colnames(dfisotops), thes)
m <- list(
l = 50,
r = 50,
b = 50,
t = 100,
pad = 20
)
shinyApp(
ui <- fluidPage(
br(), br(), br(), br(), br(), br(), br(), br(),
tabPanel("Single", fluid = TRUE,
sidebarLayout(
position = "right",
sidebarPanel(
width = 2,
checkboxGroupInput("objects", "objects",
studied.isotops,
selected = studied.isotops[1:3]),
sliderInput("kmeans", "kmeans",
min = 1, max = 5, value = 2)
),
mainPanel(
plotlyOutput("graph",
height = "800px")
)
)
)
),
server <- function(input, output, session){
observe({
if(length(input$objects) !=  3){
updateCheckboxGroupInput(session, "objects", selected = tail(input$objects, 3))
}
# })
output$graph <- renderPlotly({
# here below replace studied.isotops[1], .., studied.isotops[3] with input$..
# isotop1 <- studied.isotops[1]
# isotop2 <- studied.isotops[2]
# isotop3 <- studied.isotops[3]
isotop1 <- input$objects[1]
isotop2 <- input$objects[2]
isotop3 <- input$objects[3]
dfisotops.sel <- dfisotops[ , c(isotop1, isotop2, isotop3)]
# statistics kmeans
# kmeans with the user's nb of clusters
nb.clust <- input$kmeans
# nb.clust <- 3
dfkmeans <- kmeans(x = dfisotops.sel[ , c(isotop1, isotop2, isotop3)],
centers = nb.clust,
nstart = 20)
dfisotops.sel$cluster <- dfkmeans$cluster
all.colors <- c("red", "blue", "green", "orange", "pink")
colors <- all.colors[1 : nb.clust]
# colors <- RColorBrewer::brewer.pal(input$kmeans, "Set1")
dfcolors <- data.frame(cluster = seq(1, nb.clust),
cluster.color = colors)
dfisotops.sel$id <- rownames(dfisotops.sel)
dfisotops.sel <- merge(dfisotops.sel, dfcolors, by = "cluster", all.x = T)
row.names(dfisotops.sel) <- dfisotops.sel$id
dfisotops.sel <- dfisotops.sel[order(row.names(dfisotops.sel)), ]
# statistics %
dfisotops.sel$tot <- rowSums(dfisotops.sel[ , c(isotop1, isotop2, isotop3)])
isotop.val1.perc <- (dfisotops.sel[ , isotop1]/dfisotops.sel$tot)*100
isotop.val2.perc <- (dfisotops.sel[ , isotop2]/dfisotops.sel$tot)*100
isotop.val3.perc <- (dfisotops.sel[ , isotop3]/dfisotops.sel$tot)*100
min1 <- min(isotop.val1.perc)
min2 <- min(isotop.val2.perc)
min3 <- min(isotop.val3.perc)
# rownames(dfisotops.sel) <- rownames(dfisotops.sel.sel)
dfisotops.sel$lbl <- paste0("<b>", rownames(dfisotops.sel), "</b>", "\n",
isotop1, " %:", round(isotop.val1.perc, 2),
" | abs: ", dfisotops.sel[ , isotop1], "\n",
isotop2, " %:", round(isotop.val2.perc, 2),
" | abs: ", dfisotops.sel[ , isotop2], "\n",
isotop3, " %:", round(isotop.val3.perc, 2),
" | abs: ", dfisotops.sel[ , isotop3])
fig <- plot_ly(data = dfisotops.sel,
name = ~rownames(dfisotops.sel)) %>%
add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~isotop.val1.perc,
b = ~isotop.val2.perc,
c = ~isotop.val3.perc,
# text = ~lbl,
# hoverinfo = 'text',
#opacity = .3,
marker = list(
# symbol = ~symbol,
#symbols = 'square', # unique(df.isotop$symbol),
color = ~cluster.color,
size = 12,
opacity = .6,
line = list('width' = 1,
color = '#00000070')
)) %>%
add_trace(
type = 'scatterternary',
mode = 'text',
a = ~isotop.val1.perc,
b = ~isotop.val2.perc,
c = ~isotop.val3.perc,
text = ~cluster,
hovertext = ~lbl,
# text = ~cluster,
hoverinfo = 'text',
#opacity = .3,
marker = list(
# symbol = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
#color = ~color.object,
size = 10,
opacity = 0,
line = list('width' = 1,
color = '#00000070')),
showlegend = F,
inherit = F
) %>%
layout(
# title = "Relative percentages of lead isotops",
title = list(text = "Relative % of isotopes", x = 1),
margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min1, title = isotop1),
baxis = list(min = min2, title = isotop2),
caxis = list(min = min3, title = isotop3)
),
legend = list(x = 0.1, y = 0.9)
)
# fig
fig$config <- list(doubleClick = "resize")
fig
})
})
}
)
# shinyApp(ui, server, options=c(shiny.launch.browser = .rs.invokeShinyPaneViewer))
}
if(!run.shiny){
# TODO: pass this assignations to itineRis 'symbol' calculation
# df <- df.isotop
df$symbol <- NULL
symbols.default <- c('circle', 'square', 'triangle', 'diamond', 'star', 'cross')
objects.used <- as.character(unique(df$object))
symbols.used <- symbols.default[c(1:length(objects.used))]
symbols.objects <- data.frame(object = objects.used,
symbol = symbols.used)
df <- merge(df, symbols.objects, by = "object", all.x = TRUE)
df$Pb206_Pb204.perc <- (df$Pb206_Pb204/(df$Pb206_Pb204 + df$Pb207_Pb204 + df$Pb208_Pb204))*100
df$Pb207_Pb204.perc <- (df$Pb207_Pb204/(df$Pb206_Pb204 + df$Pb207_Pb204 + df$Pb208_Pb204))*100
df$Pb208_Pb204.perc <- (df$Pb208_Pb204/(df$Pb206_Pb204 + df$Pb207_Pb204 + df$Pb208_Pb204))*100
m <- list(
l = 50,
r = 50,
b = 50,
t = 100,
pad = 20
)
df$lbl <- paste0(df$num, "\n",
"Pb206/204: ", round(df$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(df$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(df$Pb208_Pb204.perc, 2), "%")
min206 <- min(df$Pb206_Pb204.perc)
min207 <- min(df$Pb207_Pb204.perc)
min208 <- min(df$Pb208_Pb204.perc)
fig <- plotly::plot_ly(data = df,
name = ~object,
color = ~color.object) %>%
plotly::add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
marker = list(
symbol = ~symbol,
size = 10,
opacity = .7,
line = list('width' = 1,
color = '#00000070')
)) %>%
plotly::add_trace(
type = 'scatterternary',
mode = 'text',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
hovertext = ~lbl,
hoverinfo = 'text',
marker = list(
color = ~color.object,
size = 10,
opacity = 0,
line = list('width' = 1,
color = '#00000070')),
showlegend = F,
inherit = F
) %>%
plotly::layout(
title = list(text = "Relative % of lead isotopes for mines and EIA items", x = 1),
margin = m,
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = '<sup>206</sup>Pb/<sup>204</sup>Pb'),
baxis = list(min = min207, title = '<sup>207</sup>Pb/<sup>204</sup>Pb'),
caxis = list(min = min208, title = '<sup>208</sup>Pb/<sup>204</sup>Pb')
)
)
if(export.plot){
dir.create(outDir, showWarnings = FALSE)
htmlwidgets::saveWidget(fig, paste0(outDir, "/", outFile, ".html"))
} else {
print(fig)
}
}
}
isotop_ternaryplot(run.shiny = F)
#' Correspondance Analysis on isotop data
#'
#' @name isotop_ca
#'
#' @description Correspondance Analysis on isotop data. Inspired by the `zoo_ca()` function of zoowork
#'
#' @param df.iso a dataframe
#' @param num_column the column name of assemblage numbers
#' @param pt_siz the size of the symbols
#' @param export.plot if TRUE (Default: FALSE), save the plot. If not, will plot it
#' @param dirOut the output directory
#' @param ca.name the name of the output plot if saved
#' @param plot.width,plot.height,plot.dpi the dimensions and resolution of the plot if saved
#' @param verbose if TRUE (default): verbose
#'
#' @return a gglot with the different CA by period
#'
#' @examples
#'
#'
#' @export
isotop_ca <- function(df.iso = "C:/Users/Thomas Huet/Desktop/Shadreck data/XRF_Majors.csv",
num_column = "num",
pt_siz = 1.5,
export.plot = FALSE,
dirOut = paste0(system.file(package = "itineRis"), "/results/"),
ca.name = "ca.png",
plot.width = 22.2,
plot.height = 19.5,
plot.dpi = 300,
verbose = TRUE){
dfisotops <- read.csv2(df.iso, sep = ";", row.names = 1)
dfisotops <- dfisotops %>%
select_if(~ !any(is.na(.)))
# intersect the colnames from the df and the thesaurus to find the correct columns if df
thes <- isotop_thesaurus(as.list = T)
studied.isotops <- intersect(colnames(dfisotops), thes)
# dataset
xdat <- dfisotops[ , studied.isotops]
# symbology
var.symb <- data.frame(Row.names = studied.isotops,
shape = rep(17, length(studied.isotops)),
color = rep("black", length(studied.isotops))
)
ind.symb <- data.frame(Row.names = rownames(xdat),
shape = rep(16, nrow(xdat)),
color = rep("blue", nrow(xdat))
)
if(verbose){print("  - run CA")}
# xdat <- df_lda.per[ , -which(names(df_lda.per) %in% c(typSite_column))]
ca <- FactoMineR::CA(xdat, graph = FALSE)            # AFC
inertCA1 <- round(as.numeric(ca$eig[, 2][1]), 1)
inertCA2 <- round(as.numeric(ca$eig[, 2][2]), 1)
df.ca.perc <- data.frame(
perCA1 = inertCA1,
perCA2 = inertCA2
)
coords_ind_ca <- as.data.frame(ca$row$coord)
coords_var_ca <- as.data.frame(ca$col$coord)
coords_ca <- rbind(coords_ind_ca, coords_var_ca)
colnames(coords_ca)[1] <- 'CA1'
colnames(coords_ca)[2] <- 'CA2'
dataset.p <- merge(xdat, coords_ca, by = "row.names", all.y = T)
# symbols
dfsymb <- rbind(ind.symb, var.symb)
dataset.ps <- merge(dataset.p, dfsymb, by = "Row.names", all.x = T)
dataset.ps$shape <- as.factor(dataset.ps$shape)
names(dataset.ps)[names(dataset.ps) == 'Row.names'] <- num_column
# ff <- merge(dataset.ps, df_per_site, by = num_column, all.x = T)
# matches <- colnames(dataset.ps) # reorder
# ff <- ff[ ,match(matches, colnames(ff))]
# dataset.ps <- rbind(dataset.ps,ff)
# perCA_tsit <- perCA_tsit[-1, ] #remove line 1 = 'xxx'
# dataset.ps<- dataset.ps[-1, ]
# dataset.ps$shape <- as.factor(dataset.ps$shape)
# dataset.ps$color <- as.factor(dataset.ps$color)
# CA
# dataset.ps <- dataset.ps
gca <- ggplot2::ggplot(dataset.ps, ggplot2::aes(CA1, CA2)) +
# ggplot2::geom_text(ggplot2::aes(#x = min(CA1_interval),
#                                 #y = max(CA2_interval),
#                                 label = "my label"),
#                    hjust = 0,
#                    vjust = 1) +
ggplot2::geom_point(ggplot2::aes(CA1, CA2,
colour = color,
fill = color,
stroke = .5,
pch = shape),
size = pt_siz) +
ggrepel::geom_text_repel(ggplot2::aes(CA1, CA2, label = num),
cex = 2,
segment.size = 0.1,
segment.alpha = 0.5,
max.overlaps = Inf) +
ggplot2::geom_hline(yintercept = 0, linetype = "dashed",
size = 0.2, alpha = 0.3) +
ggplot2::geom_vline(xintercept = 0, linetype = "dashed",
size = 0.2, alpha = 0.3) +
ggplot2::geom_text(data = df.ca.perc,
mapping = ggplot2::aes(x = 0, y = -Inf,
label = paste0(perCA1,"%")),
vjust = -1,
size = 2,
alpha = 0.5
) +
ggplot2::geom_text(data = df.ca.perc,
mapping = ggplot2::aes(x = -Inf, y = 0,
label = paste0(perCA2, "%")),
vjust = 1,
angle = 90,
size = 2,
alpha = 0.5) +
ggplot2::theme(axis.text = ggplot2::element_text(size = 5),
axis.title.x = ggplot2::element_text(size = 8),
axis.title.y = ggplot2::element_text(size = 8)) +
ggplot2::theme(axis.ticks = ggplot2::element_line(size = 0.2)) +
ggplot2::theme(legend.position = "none") +
ggplot2::theme(strip.text.x = ggplot2::element_text(size = 8),
strip.text.y = ggplot2::element_blank()) +
ggplot2::theme(panel.border = ggplot2::element_rect(colour = 'black',
fill = NA,
size = 0.2)) +
ggplot2::theme(panel.background = ggplot2::element_rect(fill = 'transparent')) +
ggplot2::theme(panel.spacing.y = ggplot2::unit(0, "lines")) +
# ggplot2::scale_x_continuous(limits = CA1_interval, expand = c(0, 0)) +
# ggplot2::scale_y_continuous(limits = CA2_interval, expand = c(0, 0)) +
ggplot2::scale_colour_identity() +
# ggplot2::scale_shape_identity() +
ggplot2::scale_fill_identity()
if(export.plot){
dir.create(dirOut, showWarnings = FALSE)
gout <- paste0(dirOut, ca.name)
ggplot2::ggsave(file = gout,
plot = gca,
width = plot.width,
height = plot.height,
units = "cm",
dpi = plot.dpi)  ## save plot
if(verbose){print(paste0("The plot '", ca.name,"' has been saved in '", dirOut,"'"))}
} else {
return(gca)
}
}
isotop_ca(export.plot = T,
dirOut = "C:/Users/Thomas Huet/Desktop/Shadreck data/")
