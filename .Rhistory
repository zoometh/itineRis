#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plot_ly(dfisotops) %>%
add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbols = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plot_ly(dfisotops) %>%
add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbol = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
?add_trace
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plot_ly(dfisotops) %>%
add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbol = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(title = list(text='<b>Lead Isotops</b>'),
orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
detach("package:plotly", unload = TRUE)
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plotly::plot_ly(dfisotops) %>%
plotly::add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbol = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
plotly::layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(title = list(text='<b>Lead Isotops</b>'),
orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plotly::plot_ly(dfisotops) %>%
plotly::add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbol = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
plotly::layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(title = list(text='<b>Lead Isotops</b>'),
orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
detach("package:plotly", unload = TRUE)
#' Create a ternary plot from a dataset
#' @name isotop_ternaryplot
#' @description
#'
#' @param df a dataframe. By defaut NA, so it will read a file using `df.path`
#' @param df.path if `df` is NA, will use this path and name to read the dataset from a file. Either a TSV or a CSV with ';' separators.
#' @param color.column the name on which the different colors will be setup. By default, the colors
#' are those of the objects
#' @verbose if TRUE, print messages
#'
#' @return a dataframe with an hexadecimal value for the colors
#'
#' @examples
#'
#' df.isotop <- isotop_dataframe()
#'
#' @export
# library(plotly)
# df.isotop$Pb206_Pb204.perc <- round((df.isotop$Pb206_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb207_Pb204.perc <- round((df.isotop$Pb207_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
# df.isotop$Pb208_Pb204.perc <- round((df.isotop$Pb208_Pb204/(df.isotop$Pb206_Pb204 + df.isotop$Pb207_Pb204 + df.isotop$Pb208_Pb204) * 100), 2)
#
# write.csv2(df.isotop, paste0(getwd(), "/dfisotops.csv"))
# isotop_ternaryplot <- function(df = NA,
#                                )
dfisotops <- df.isotop
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"), sep = ";") # server
# dfisotops <- read.csv2(paste0(getwd(), "/dfisotops.csv"),  sep = ";") # locally
dfisotops$Pb206_Pb204.perc <- (dfisotops$Pb206_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb207_Pb204.perc <- (dfisotops$Pb207_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$Pb208_Pb204.perc <- (dfisotops$Pb208_Pb204/(dfisotops$Pb206_Pb204 + dfisotops$Pb207_Pb204 + dfisotops$Pb208_Pb204))*100
dfisotops$lbl <- paste0(dfisotops$num, "\n",
"Pb206/204: ", round(dfisotops$Pb206_Pb204.perc, 2), "% \n",
"Pb207/204: ", round(dfisotops$Pb207_Pb204.perc, 2), "% \n",
"Pb208/204: ", round(dfisotops$Pb208_Pb204.perc, 2), "%")
# m <- list(
#   l = 50,
#   r = 50,
#   b = 50,
#   t = 100,
#   pad = 20
# )
# df.isotop.filtered <- dfisotops[dfisotops$object %in% c(input$objects, input$mines), ]
min206 <- min(dfisotops$Pb206_Pb204.perc)
min207 <- min(dfisotops$Pb207_Pb204.perc)
min208 <- min(dfisotops$Pb208_Pb204.perc)
fig <- plotly::plot_ly(dfisotops) %>%
plotly::add_trace(
type = 'scatterternary',
mode = 'markers',
a = ~Pb206_Pb204.perc,
b = ~Pb207_Pb204.perc,
c = ~Pb208_Pb204.perc,
text = ~lbl,
hoverinfo='text',
# symbol = ~symbol,
symbol = ~symbol,
marker = list(
# symbol = ~symbol,
# symbols = ~symbol,
# symbols = 'square',# unique(df.isotop$symbol),
color = ~color.object,
size = 10,
line = list('width' = 1, color = 'black')
)
) %>%
plotly::layout(
title = "Relative percentages of lead isotops",
# margin = m,
# title = list(orientation = "h",   # show entries horizontally
#              xanchor = "center",  # use center of legend as anchor
#              x = 0.5,
#              text = "Relative percentages of lead isotops"),
ternary = list(
legend = list(title = list(text='<b>Lead Isotops</b>'),
orientation = "h"),
sum = 100,
aaxis = list(min = min206, title = 'Pb206/Pb204'),
baxis = list(min = min207, title = 'Pb207/Pb204'),
caxis = list(min = min208, title = 'Pb208/Pb204')
)
)
print(fig)
roxygen2::roxygenise()
roxygen2::roxygenise()
