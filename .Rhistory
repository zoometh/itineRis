layout(xaxis = list(autotypenumbers = 'strict', title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor='#000000',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 10,
gridcolor = '#ffffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 10,
gridcolor = 'white'))
fig
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(xaxis = list(showgrid = FALSE),
yaxis = list(gridcolor = "black"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#000000',
xaxis = list(showgrid = FALSE),
yaxis = list(gridcolor = "black"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#000000',
xaxis = list(showgrid = FALSE),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
isotop_3d <- function(df = NA,
vars = c("var1", "var2", "var3"),
color.column = "color.object",
background.color = "black",
title.plot = 'Isotop measures',
export.plot = FALSE,
out.plot = "isotop_3d.html",
dirOut = paste0(system.file(package = "itineRis"), "/results/")){
type <- unlist(stringr::str_split(color.column, "\\."))[2]
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', '#ffff')
} else {
bg.color <- c('rgb(255, 255, 255)', '#0000')
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% plotly::add_markers()
d3 <- d3 %>% plotly::layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
)
if (export.plot) {
dir.create(dirOut, showWarnings = FALSE)
htmlwidgets::saveWidget(d3, out.plot)
print(paste("interactive 3D plot '", out.plot, "' created in '", dirOut, "'"))
} else {
print(d3)
}
}
isotop_3d(df.isotop, background.color = "black")
isotop_3d <- function(df = NA,
vars = c("var1", "var2", "var3"),
color.column = "color.object",
background.color = "black",
title.plot = 'Isotop measures',
export.plot = FALSE,
out.plot = "isotop_3d.html",
dirOut = paste0(system.file(package = "itineRis"), "/results/")){
type <- unlist(stringr::str_split(color.column, "\\."))[2]
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', '#ffff')
} else {
bg.color <- c('rgb(255, 255, 255)', '#0000')
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% plotly::add_markers()
d3 <- d3 %>% plotly::layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
if (export.plot) {
dir.create(dirOut, showWarnings = FALSE)
htmlwidgets::saveWidget(d3, out.plot)
print(paste("interactive 3D plot '", out.plot, "' created in '", dirOut, "'"))
} else {
print(d3)
}
}
isotop_3d(df.isotop, background.color = "black")
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
df <- df.isotop
vars = c("var1", "var2", "var3")
color.column = "color.object"
background.color = "black"
title.plot = 'Isotop measures'
export.plot = FALSE
out.plot = "isotop_3d.html"
type <- unlist(stringr::str_split(color.column, "\\."))[2]
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', '#ffff')
} else {
bg.color <- c('rgb(255, 255, 255)', '#0000')
}
plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3
d3 <- d3 %>% plotly::layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
d3
d3
plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type]) %>%
layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
bg.color[1]
plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type]) %>%
layout(plot_bgcolor=bg.color[1],
plot_bgcolor = bg.color[1],
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
bg.color[1]
plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type]) %>%
layout(plot_bgcolor = '#000000',
plot_bgcolor = '#000000',
xaxis = list(gridcolor = "white"),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#000000',
xaxis = list(gridcolor = "blue"),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#0000ff',
xaxis = list(gridcolor = "blue"),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2)) %>%
layout(plot_bgcolor='#0000ff',
xaxis = list(gridcolor = "black"),
yaxis = list(gridcolor = "white"))
plot_ly(x = c(1,2), y = c(1,2), z = (c(2,3))) %>%
layout(plot_bgcolor='#0000ff',
xaxis = list(gridcolor = "black"),
yaxis = list(gridcolor = "white"))
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', 'rgb(255, 255, 255)')
} else {
bg.color <- c('rgb(255, 255, 255)', 'rgb(0, 0, 0)')
}
bg.color
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
plot_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1])
d3
bg.color[1]
plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1])
bg.color[2]
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1])
d3
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[1])
if (export.plot) {
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[1])
)
d3
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = "white")
)
d3
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[3])
)
d3
bg.color[3]
background.color
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', 'rgb(255, 255, 255)', "white")
} else {
bg.color <- c('rgb(255, 255, 255)', 'rgb(0, 0, 0)', "black")
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[3])
)
d3
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', 'rgb(255, 255, 255)', "white")
} else {
bg.color <- c('rgb(255, 255, 255)', 'rgb(0, 0, 0)', "black")
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[1])
)
d3
isotop_3d <- function(df = NA,
vars = c("var1", "var2", "var3"),
color.column = "color.object",
background.color = "black",
title.plot = 'Isotop measures',
export.plot = FALSE,
out.plot = "isotop_3d.html",
dirOut = paste0(system.file(package = "itineRis"), "/results/")){
type <- unlist(stringr::str_split(color.column, "\\."))[2]
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', 'rgb(255, 255, 255)', "white")
} else {
bg.color <- c('rgb(255, 255, 255)', 'rgb(0, 0, 0)', "black")
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[3])
)
if (export.plot) {
dir.create(dirOut, showWarnings = FALSE)
htmlwidgets::saveWidget(d3, out.plot)
print(paste("interactive 3D plot '", out.plot, "' created in '", dirOut, "'"))
} else {
print(d3)
}
}
isotop_3d(df.isotop, export.plot = T)
dirOut
dirOut = paste0(system.file(package = "itineRis"), "/results/")
dirOut
system.file(package = "itineRis")
out.plot
isotop_3d <- function(df = NA,
vars = c("var1", "var2", "var3"),
color.column = "color.object",
background.color = "black",
title.plot = 'Isotop measures',
export.plot = FALSE,
out.plot = "isotop_3d.html",
dirOut = paste0(system.file(package = "itineRis"), "/results/")){
type <- unlist(stringr::str_split(color.column, "\\."))[2]
if(background.color == "black"){
bg.color <- c('rgb(0, 0, 0)', 'rgb(255, 255, 255)', "white")
} else {
bg.color <- c('rgb(255, 255, 255)', 'rgb(0, 0, 0)', "black")
}
d3 <- plotly::plot_ly(df,
x = df[ , vars[1]],
y = df[ , vars[2]],
z = df[ , vars[3]],
color = df[ , type],
colors = df[ , color.column],
hoverinfo = 'text',
text = df[ , type])
d3 <- d3 %>% add_markers()
d3 <- d3 %>% layout(scene = list(xaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwidth = 2),
yaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2),
zaxis = list(gridcolor = bg.color[2],
ticklen = 5,
gridwith = 2)),
paper_bgcolor = bg.color[1],
plot_bgcolor = bg.color[1],
font = list(color = bg.color[3])
)
if (export.plot) {
dir.create(dirOut, showWarnings = FALSE)
htmlwidgets::saveWidget(d3, paste0(dirOut, out.plot))
print(paste("interactive 3D plot '", out.plot, "' created in '", dirOut, "'"))
} else {
print(d3)
}
}
isotop_3d(df.isotop, export.plot = T)
